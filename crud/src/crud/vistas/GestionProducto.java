/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package crud.vistas;

import crud.controladores.CrudControlador;
import crud.modelos.modeloProductos;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ernes
 */
public class GestionProducto extends javax.swing.JInternalFrame {
private void Cargar()
    {
        crud.controladores.CrudControlador oProducto=new CrudControlador();
        ArrayList<modeloProductos> Productos=new ArrayList<>();  
        Productos=oProducto.TODOS_LOS_PRODUCTOS();
        
        DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("IDProductos");
        modelo.addColumn("NombreProducto");
        modelo.addColumn("IDProveedor");
        modelo.addColumn("IDCategoria");
        modelo.addColumn("CantidadPorUnidad");
        modelo.addColumn("PrecioUnitario");
        modelo.addColumn("Existencias");
        
        for(modeloProductos producto : Productos)
        {
                modelo.addRow(new Object[]{
                producto.getProductID(),
                producto.getProductName(),
                producto.getSupplierID(),
                producto.getCategoryID(),
                producto.getQuantityPerUnit(),
                producto.getUnitPrice(),
                producto.getUnitsInStock()
            });
        }
        
        Datos.setModel(modelo);
    }
    /**
     * Creates new form GestionProducto
     */
    public GestionProducto() {
        initComponents();
        Cargar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Datos = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 102, 102));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(0, 204, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnEliminar)
                .addGap(18, 18, 18)
                .addComponent(btnEditar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnEditar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Datos.setBackground(new java.awt.Color(153, 255, 153));
        Datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Datos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        // Obtener filas seleccionadas en la tabla Datos
    int[] filasSeleccionadas = Datos.getSelectedRows();

    if (filasSeleccionadas.length > 0) {
        CrudControlador oProducto = new CrudControlador();
        int eliminacionesExitosas = 0;

        for (int filaSeleccionada : filasSeleccionadas) {
            int idProducto = (int) Datos.getValueAt(filaSeleccionada, 0); // Suponiendo que el ID del producto está en la primera columna.

            // Obtener los datos del producto a eliminar directamente de la tabla
            String nombreProducto = Datos.getValueAt(filaSeleccionada, 1).toString(); // Segunda columna
            double precioUnitario = (double) Datos.getValueAt(filaSeleccionada, 5); // Sexta columna
            int existencias = (int) Datos.getValueAt(filaSeleccionada, 6); // Séptima columna

            // Crear un mensaje personalizado para confirmar la eliminación
            String mensajeConfirmacion = "¿Desea eliminar el siguiente producto?\n\n"
                    + "ID: " + idProducto + "\n"
                    + "Nombre: " + nombreProducto + "\n"
                    + "Precio Unitario: " + precioUnitario + "\n"
                    + "Existencias: " + existencias + "\n\n"
                    + "Esta acción no se puede deshacer.";

            int confirmacion = JOptionPane.showConfirmDialog(this, mensajeConfirmacion, "Eliminar Producto", JOptionPane.YES_NO_OPTION);

            // Verificar la respuesta del usuario
            if (confirmacion == JOptionPane.YES_OPTION) {
                // El usuario ha confirmado la eliminación, puedes utilizar el ID del producto para eliminarlo
                int filasAfectadas = oProducto.eliminar(idProducto);

                if (filasAfectadas > 0) {
                    // Eliminación exitosa, incrementar el contador
                    eliminacionesExitosas++;
                }
            }
        }

        // Actualizar la tabla después de eliminar los productos
        Cargar();

        if (eliminacionesExitosas > 0) {
            JOptionPane.showMessageDialog(this, eliminacionesExitosas + " producto eliminado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo eliminar ningún producto.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        } else {
        // Si no se selecciona ninguna fila, mostrar un mensaje de error
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un producto de la lista para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        // Obtener la fila seleccionada en la tabla Datos
        int filaSeleccionada = Datos.getSelectedRow();

        if (filaSeleccionada != -1) { // Verifica si se seleccionó una fila
        int idProducto = (int) Datos.getValueAt(filaSeleccionada, 0); // Suponiendo que el ID del producto está en la primera columna.

        // Crear una instancia del formulario de edición y pasar el ID del producto
        ActualizarProductos formularioEdicion = new ActualizarProductos(idProducto);
        formularioEdicion.setVisible(true);

        formularioEdicion.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Cargar(); // Recargar la tabla cuando se cierre la ventana de edición
            }
        });
        
        } else {
        // Si no se selecciona ninguna fila, mostrar un mensaje de error
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un producto de la lista para editar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Datos;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
